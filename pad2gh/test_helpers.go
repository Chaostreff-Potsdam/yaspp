package main

import (
	"fmt"
	"strings"
)

// Mock functions for testing - these should be moved to test files
func getMockPadURLs() []string {
	return []string{
		"https://pad.ccc-p.org/Radio_2024-01-15_test1",
		"https://pad.ccc-p.org/Radio_2024-02-12_test2",
		"https://pad.ccc-p.org/Radio_2024-03-11_test3",
		"https://pad.ccc-p.org/Radio_2023-12-01_test4",
		"https://pad.ccc-p.org/Radio_2021-06-14_existing", // This one exists in the YAML
	}
}

func getMockPadContent() map[string][]string {
	return map[string][]string{
		"summary": {"Test summary for mock pad entry"},
		"shownotes": {
			"* Test shownote 1",
			"* Test shownote 2",
			"* [Test Link](https://example.com)",
		},
		"chapters": {
			"00:00:00 Introduction",
			"00:05:30 Main Topic",
			"00:15:00 Conclusion",
		},
		"mukke": {
			"Test Music: https://freemusicarchive.org/music/test/song1",
		},
	}
}

func createMockEntry(padURL, date string) *CiREntry {
	parts := strings.Split(date, "-")
	year, month, day := parts[0], parts[1], parts[2]

	entry := &CiREntry{
		UUID:            fmt.Sprintf("nt-%s-%s-%s", year, month, day),
		Title:           fmt.Sprintf("CiR am %s.%s.%s", day, month, year),
		Subtitle:        "Der Chaostreff im Freien Radio Potsdam",
		Summary:         "Mock summary for testing bulk functionality",
		PublicationDate: fmt.Sprintf("%s-%s-%sT00:00:00+02:00", year, month, day),
		Audio: []CiRaudio{{
			Url:      fmt.Sprintf("$media_base_url/%s_%s_%s-chaos-im-radio.mp3", year, month, day),
			MimeType: "audio/mp3",
		}},
		Chapters: []CiRChapter{
			{Start: "00:00:00", Title: "Mock Introduction"},
			{Start: "00:05:30", Title: "Mock Main Topic"},
		},
		LongSummaryMD:      "**Shownotes:**\n* Mock shownote for testing\n* Generated by test mode",
		padURL:             padURL,
		processingWarnings: []string{"Generated in test mode"},
	}

	return entry
}
